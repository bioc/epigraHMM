// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// aggregate
arma::mat aggregate(arma::vec x, arma::vec f);
RcppExport SEXP _epigraHMM_aggregate(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate(x, f));
    return rcpp_result_gen;
END_RCPP
}
// computeQFunction
double computeQFunction(Rcpp::StringVector hdf5, arma::vec pi, arma::mat gamma);
RcppExport SEXP _epigraHMM_computeQFunction(SEXP hdf5SEXP, SEXP piSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(computeQFunction(hdf5, pi, gamma));
    return rcpp_result_gen;
END_RCPP
}
// computeViterbiSequence
arma::vec computeViterbiSequence(Rcpp::StringVector hdf5, arma::vec pi, arma::mat gamma);
RcppExport SEXP _epigraHMM_computeViterbiSequence(SEXP hdf5SEXP, SEXP piSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(computeViterbiSequence(hdf5, pi, gamma));
    return rcpp_result_gen;
END_RCPP
}
// consensusRejectionControlled
arma::field<arma::mat> consensusRejectionControlled(Rcpp::StringVector hdf5, arma::vec f, double p);
RcppExport SEXP _epigraHMM_consensusRejectionControlled(SEXP hdf5SEXP, SEXP fSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(consensusRejectionControlled(hdf5, f, p));
    return rcpp_result_gen;
END_RCPP
}
// differentialRejectionControlled
arma::field<arma::mat> differentialRejectionControlled(Rcpp::StringVector hdf5, arma::vec f, double p, int N);
RcppExport SEXP _epigraHMM_differentialRejectionControlled(SEXP hdf5SEXP, SEXP fSEXP, SEXP pSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(differentialRejectionControlled(hdf5, f, p, N));
    return rcpp_result_gen;
END_RCPP
}
// expStep
void expStep(arma::vec pi, arma::mat gamma, arma::mat logf, Rcpp::StringVector hdf5);
RcppExport SEXP _epigraHMM_expStep(SEXP piSEXP, SEXP gammaSEXP, SEXP logfSEXP, SEXP hdf5SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    expStep(pi, gamma, logf, hdf5);
    return R_NilValue;
END_RCPP
}
// getMarginalProbability
arma::mat getMarginalProbability(Rcpp::StringVector hdf5);
RcppExport SEXP _epigraHMM_getMarginalProbability(SEXP hdf5SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    rcpp_result_gen = Rcpp::wrap(getMarginalProbability(hdf5));
    return rcpp_result_gen;
END_RCPP
}
// innerMaxStepProb
arma::vec innerMaxStepProb(Rcpp::StringVector hdf5);
RcppExport SEXP _epigraHMM_innerMaxStepProb(SEXP hdf5SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    rcpp_result_gen = Rcpp::wrap(innerMaxStepProb(hdf5));
    return rcpp_result_gen;
END_RCPP
}
// maxStepProb
Rcpp::List maxStepProb(Rcpp::StringVector hdf5);
RcppExport SEXP _epigraHMM_maxStepProb(SEXP hdf5SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    rcpp_result_gen = Rcpp::wrap(maxStepProb(hdf5));
    return rcpp_result_gen;
END_RCPP
}
// rbinomVectorized
arma::vec rbinomVectorized(arma::vec prob);
RcppExport SEXP _epigraHMM_rbinomVectorized(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(rbinomVectorized(prob));
    return rcpp_result_gen;
END_RCPP
}
// reweight
arma::vec reweight(arma::vec x, double p);
RcppExport SEXP _epigraHMM_reweight(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(reweight(x, p));
    return rcpp_result_gen;
END_RCPP
}
// saveMixtureProb
void saveMixtureProb(arma::mat eta, Rcpp::StringVector hdf5);
RcppExport SEXP _epigraHMM_saveMixtureProb(SEXP etaSEXP, SEXP hdf5SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type hdf5(hdf5SEXP);
    saveMixtureProb(eta, hdf5);
    return R_NilValue;
END_RCPP
}
// simulateMarkovChain
NumericVector simulateMarkovChain(NumericMatrix P, int n);
RcppExport SEXP _epigraHMM_simulateMarkovChain(SEXP PSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateMarkovChain(P, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epigraHMM_aggregate", (DL_FUNC) &_epigraHMM_aggregate, 2},
    {"_epigraHMM_computeQFunction", (DL_FUNC) &_epigraHMM_computeQFunction, 3},
    {"_epigraHMM_computeViterbiSequence", (DL_FUNC) &_epigraHMM_computeViterbiSequence, 3},
    {"_epigraHMM_consensusRejectionControlled", (DL_FUNC) &_epigraHMM_consensusRejectionControlled, 3},
    {"_epigraHMM_differentialRejectionControlled", (DL_FUNC) &_epigraHMM_differentialRejectionControlled, 4},
    {"_epigraHMM_expStep", (DL_FUNC) &_epigraHMM_expStep, 4},
    {"_epigraHMM_getMarginalProbability", (DL_FUNC) &_epigraHMM_getMarginalProbability, 1},
    {"_epigraHMM_innerMaxStepProb", (DL_FUNC) &_epigraHMM_innerMaxStepProb, 1},
    {"_epigraHMM_maxStepProb", (DL_FUNC) &_epigraHMM_maxStepProb, 1},
    {"_epigraHMM_rbinomVectorized", (DL_FUNC) &_epigraHMM_rbinomVectorized, 1},
    {"_epigraHMM_reweight", (DL_FUNC) &_epigraHMM_reweight, 2},
    {"_epigraHMM_saveMixtureProb", (DL_FUNC) &_epigraHMM_saveMixtureProb, 2},
    {"_epigraHMM_simulateMarkovChain", (DL_FUNC) &_epigraHMM_simulateMarkovChain, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_epigraHMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
